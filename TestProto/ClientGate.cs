// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class ClientGate {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_Position__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::Position, global::Position.Builder> internal__static_Position__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_Character__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::Character, global::Character.Builder> internal__static_Character__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ClientCommonResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ClientCommonResponse, global::ClientCommonResponse.Builder> internal__static_ClientCommonResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_UserLoginRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::UserLoginRequest, global::UserLoginRequest.Builder> internal__static_UserLoginRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_UserLoginResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::UserLoginResponse, global::UserLoginResponse.Builder> internal__static_UserLoginResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_UserLogoutRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::UserLogoutRequest, global::UserLogoutRequest.Builder> internal__static_UserLogoutRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_UserLogoutResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::UserLogoutResponse, global::UserLogoutResponse.Builder> internal__static_UserLogoutResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_GetCharacterInfoRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::GetCharacterInfoRequest, global::GetCharacterInfoRequest.Builder> internal__static_GetCharacterInfoRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_GetCharacterInfoResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::GetCharacterInfoResponse, global::GetCharacterInfoResponse.Builder> internal__static_GetCharacterInfoResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CharacterMove__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CharacterMove, global::CharacterMove.Builder> internal__static_CharacterMove__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static ClientGate() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CiJUZXN0UHJvdG8vcHJvdG9zL2NsaWVudF9nYXRlLnByb3RvIjQKCFBvc2l0", 
          "aW9uEgwKBHBvc1gYASACKAUSDAoEcG9zWRgCIAIoBRIMCgRwb3NaGAMgAigF", 
          "IgsKCUNoYXJhY3RlciI3ChRDbGllbnRDb21tb25SZXNwb25zZRIfCgRzdGF0", 
          "GAEgAigOMhEuQ2xpZW50Q29tbW9uU3RhdCIvChBVc2VyTG9naW5SZXF1ZXN0", 
          "Eg0KBXVuYW1lGAEgAigJEgwKBHVwd2QYAiACKAkiPQoRVXNlckxvZ2luUmVz", 
          "cG9uc2USGAoEY29kZRgBIAIoDjIKLkxvZ2luQ29kZRIOCgZ0aWNrZXQYAiAC", 
          "KAkiIwoRVXNlckxvZ291dFJlcXVlc3QSDgoGdGlja2V0GAEgAigJIi4KElVz", 
          "ZXJMb2dvdXRSZXNwb25zZRIYCgRjb2RlGAEgAigOMgouTG9naW5Db2RlIikK", 
          "F0dldENoYXJhY3RlckluZm9SZXF1ZXN0Eg4KBnRpY2tldBgBIAIoCSI5ChhH", 
          "ZXRDaGFyYWN0ZXJJbmZvUmVzcG9uc2USHQoJY2hhcmFjdGVyGAEgAigLMgou", 
          "Q2hhcmFjdGVyIjkKDUNoYXJhY3Rlck1vdmUSDgoGdGlja2V0GAEgAigJEhgK", 
          "BXRvUG9zGAIgAigLMgkuUG9zaXRpb24qMQoJTG9naW5Db2RlEgcKA1NVQxAA", 
          "Eg0KCUVSUk9SX1BXRBABEgwKCE9DQ1VQSUVEEAIqJQoQQ2xpZW50Q29tbW9u", 
          "U3RhdBIGCgJPSxAAEgkKBUVSUk9SEAEywwEKEVNlcnZlckdhdGVTZXJ2aWNl", 
          "EjIKCXVzZXJMb2dpbhIRLlVzZXJMb2dpblJlcXVlc3QaEi5Vc2VyTG9naW5S", 
          "ZXNwb25zZRI1Cgp1c2VyTG9nb3V0EhIuVXNlckxvZ291dFJlcXVlc3QaEy5V", 
          "c2VyTG9nb3V0UmVzcG9uc2USQwoMZ2V0Q2hhcmFjdGVyEhguR2V0Q2hhcmFj", 
          "dGVySW5mb1JlcXVlc3QaGS5HZXRDaGFyYWN0ZXJJbmZvUmVzcG9uc2UyRAoR", 
          "Q2xpZW50U2lkZVNlcnZpY2USLwoGbW92ZVRvEg4uQ2hhcmFjdGVyTW92ZRoV", 
          "LkNsaWVudENvbW1vblJlc3BvbnNlQiwKDmNvbS5tbW8uc2VydmVyQhRTZXJ2", 
        "ZXJDbGllbnRQcm90b2NvbIgBAaABAQ=="));
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_Position__Descriptor = Descriptor.MessageTypes[0];
      internal__static_Position__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::Position, global::Position.Builder>(internal__static_Position__Descriptor,
              new string[] { "PosX", "PosY", "PosZ", });
      internal__static_Character__Descriptor = Descriptor.MessageTypes[1];
      internal__static_Character__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::Character, global::Character.Builder>(internal__static_Character__Descriptor,
              new string[] { });
      internal__static_ClientCommonResponse__Descriptor = Descriptor.MessageTypes[2];
      internal__static_ClientCommonResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ClientCommonResponse, global::ClientCommonResponse.Builder>(internal__static_ClientCommonResponse__Descriptor,
              new string[] { "Stat", });
      internal__static_UserLoginRequest__Descriptor = Descriptor.MessageTypes[3];
      internal__static_UserLoginRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::UserLoginRequest, global::UserLoginRequest.Builder>(internal__static_UserLoginRequest__Descriptor,
              new string[] { "Uname", "Upwd", });
      internal__static_UserLoginResponse__Descriptor = Descriptor.MessageTypes[4];
      internal__static_UserLoginResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::UserLoginResponse, global::UserLoginResponse.Builder>(internal__static_UserLoginResponse__Descriptor,
              new string[] { "Code", "Ticket", });
      internal__static_UserLogoutRequest__Descriptor = Descriptor.MessageTypes[5];
      internal__static_UserLogoutRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::UserLogoutRequest, global::UserLogoutRequest.Builder>(internal__static_UserLogoutRequest__Descriptor,
              new string[] { "Ticket", });
      internal__static_UserLogoutResponse__Descriptor = Descriptor.MessageTypes[6];
      internal__static_UserLogoutResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::UserLogoutResponse, global::UserLogoutResponse.Builder>(internal__static_UserLogoutResponse__Descriptor,
              new string[] { "Code", });
      internal__static_GetCharacterInfoRequest__Descriptor = Descriptor.MessageTypes[7];
      internal__static_GetCharacterInfoRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::GetCharacterInfoRequest, global::GetCharacterInfoRequest.Builder>(internal__static_GetCharacterInfoRequest__Descriptor,
              new string[] { "Ticket", });
      internal__static_GetCharacterInfoResponse__Descriptor = Descriptor.MessageTypes[8];
      internal__static_GetCharacterInfoResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::GetCharacterInfoResponse, global::GetCharacterInfoResponse.Builder>(internal__static_GetCharacterInfoResponse__Descriptor,
              new string[] { "Character", });
      internal__static_CharacterMove__Descriptor = Descriptor.MessageTypes[9];
      internal__static_CharacterMove__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CharacterMove, global::CharacterMove.Builder>(internal__static_CharacterMove__Descriptor,
              new string[] { "Ticket", "ToPos", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        }, assigner);
  }
  #endregion
  
}
#region Enums
public enum LoginCode {
  SUC = 0,
  ERROR_PWD = 1,
  OCCUPIED = 2,
}

public enum ClientCommonStat {
  OK = 0,
  ERROR = 1,
}

#endregion

#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Position : pb::GeneratedMessage<Position, Position.Builder> {
  private Position() { }
  private static readonly Position defaultInstance = new Position().MakeReadOnly();
  private static readonly string[] _positionFieldNames = new string[] { "posX", "posY", "posZ" };
  private static readonly uint[] _positionFieldTags = new uint[] { 8, 16, 24 };
  public static Position DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Position DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Position ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_Position__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Position, Position.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_Position__FieldAccessorTable; }
  }
  
  public const int PosXFieldNumber = 1;
  private bool hasPosX;
  private int posX_;
  public bool HasPosX {
    get { return hasPosX; }
  }
  public int PosX {
    get { return posX_; }
  }
  
  public const int PosYFieldNumber = 2;
  private bool hasPosY;
  private int posY_;
  public bool HasPosY {
    get { return hasPosY; }
  }
  public int PosY {
    get { return posY_; }
  }
  
  public const int PosZFieldNumber = 3;
  private bool hasPosZ;
  private int posZ_;
  public bool HasPosZ {
    get { return hasPosZ; }
  }
  public int PosZ {
    get { return posZ_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasPosX) return false;
      if (!hasPosY) return false;
      if (!hasPosZ) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _positionFieldNames;
    if (hasPosX) {
      output.WriteInt32(1, field_names[0], PosX);
    }
    if (hasPosY) {
      output.WriteInt32(2, field_names[1], PosY);
    }
    if (hasPosZ) {
      output.WriteInt32(3, field_names[2], PosZ);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPosX) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, PosX);
    }
    if (hasPosY) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, PosY);
    }
    if (hasPosZ) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, PosZ);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static Position ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Position ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Position ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Position ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Position ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Position ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Position ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Position ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Position ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Position ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Position MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Position prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Position, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Position cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Position result;
    
    private Position PrepareBuilder() {
      if (resultIsReadOnly) {
        Position original = result;
        result = new Position();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Position MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Position.Descriptor; }
    }
    
    public override Position DefaultInstanceForType {
      get { return global::Position.DefaultInstance; }
    }
    
    public override Position BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Position) {
        return MergeFrom((Position) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Position other) {
      if (other == global::Position.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPosX) {
        PosX = other.PosX;
      }
      if (other.HasPosY) {
        PosY = other.PosY;
      }
      if (other.HasPosZ) {
        PosZ = other.PosZ;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_positionFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _positionFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPosX = input.ReadInt32(ref result.posX_);
            break;
          }
          case 16: {
            result.hasPosY = input.ReadInt32(ref result.posY_);
            break;
          }
          case 24: {
            result.hasPosZ = input.ReadInt32(ref result.posZ_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPosX {
      get { return result.hasPosX; }
    }
    public int PosX {
      get { return result.PosX; }
      set { SetPosX(value); }
    }
    public Builder SetPosX(int value) {
      PrepareBuilder();
      result.hasPosX = true;
      result.posX_ = value;
      return this;
    }
    public Builder ClearPosX() {
      PrepareBuilder();
      result.hasPosX = false;
      result.posX_ = 0;
      return this;
    }
    
    public bool HasPosY {
      get { return result.hasPosY; }
    }
    public int PosY {
      get { return result.PosY; }
      set { SetPosY(value); }
    }
    public Builder SetPosY(int value) {
      PrepareBuilder();
      result.hasPosY = true;
      result.posY_ = value;
      return this;
    }
    public Builder ClearPosY() {
      PrepareBuilder();
      result.hasPosY = false;
      result.posY_ = 0;
      return this;
    }
    
    public bool HasPosZ {
      get { return result.hasPosZ; }
    }
    public int PosZ {
      get { return result.PosZ; }
      set { SetPosZ(value); }
    }
    public Builder SetPosZ(int value) {
      PrepareBuilder();
      result.hasPosZ = true;
      result.posZ_ = value;
      return this;
    }
    public Builder ClearPosZ() {
      PrepareBuilder();
      result.hasPosZ = false;
      result.posZ_ = 0;
      return this;
    }
  }
  static Position() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Character : pb::GeneratedMessage<Character, Character.Builder> {
  private Character() { }
  private static readonly Character defaultInstance = new Character().MakeReadOnly();
  private static readonly string[] _characterFieldNames = new string[] {  };
  private static readonly uint[] _characterFieldTags = new uint[] {  };
  public static Character DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Character DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Character ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_Character__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Character, Character.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_Character__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _characterFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static Character ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Character ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Character ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Character ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Character ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Character ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Character ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Character ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Character ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Character ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Character MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Character prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Character, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Character cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Character result;
    
    private Character PrepareBuilder() {
      if (resultIsReadOnly) {
        Character original = result;
        result = new Character();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Character MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Character.Descriptor; }
    }
    
    public override Character DefaultInstanceForType {
      get { return global::Character.DefaultInstance; }
    }
    
    public override Character BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Character) {
        return MergeFrom((Character) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Character other) {
      if (other == global::Character.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_characterFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _characterFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static Character() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ClientCommonResponse : pb::GeneratedMessage<ClientCommonResponse, ClientCommonResponse.Builder> {
  private ClientCommonResponse() { }
  private static readonly ClientCommonResponse defaultInstance = new ClientCommonResponse().MakeReadOnly();
  private static readonly string[] _clientCommonResponseFieldNames = new string[] { "stat" };
  private static readonly uint[] _clientCommonResponseFieldTags = new uint[] { 8 };
  public static ClientCommonResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ClientCommonResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ClientCommonResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_ClientCommonResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ClientCommonResponse, ClientCommonResponse.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_ClientCommonResponse__FieldAccessorTable; }
  }
  
  public const int StatFieldNumber = 1;
  private bool hasStat;
  private global::ClientCommonStat stat_ = global::ClientCommonStat.OK;
  public bool HasStat {
    get { return hasStat; }
  }
  public global::ClientCommonStat Stat {
    get { return stat_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasStat) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _clientCommonResponseFieldNames;
    if (hasStat) {
      output.WriteEnum(1, field_names[0], (int) Stat, Stat);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStat) {
      size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Stat);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ClientCommonResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ClientCommonResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ClientCommonResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ClientCommonResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ClientCommonResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ClientCommonResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ClientCommonResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ClientCommonResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ClientCommonResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ClientCommonResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ClientCommonResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ClientCommonResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ClientCommonResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ClientCommonResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ClientCommonResponse result;
    
    private ClientCommonResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        ClientCommonResponse original = result;
        result = new ClientCommonResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ClientCommonResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ClientCommonResponse.Descriptor; }
    }
    
    public override ClientCommonResponse DefaultInstanceForType {
      get { return global::ClientCommonResponse.DefaultInstance; }
    }
    
    public override ClientCommonResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ClientCommonResponse) {
        return MergeFrom((ClientCommonResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ClientCommonResponse other) {
      if (other == global::ClientCommonResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStat) {
        Stat = other.Stat;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_clientCommonResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _clientCommonResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            object unknown;
            if(input.ReadEnum(ref result.stat_, out unknown)) {
              result.hasStat = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(1, (ulong)(int)unknown);
            }
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStat {
     get { return result.hasStat; }
    }
    public global::ClientCommonStat Stat {
      get { return result.Stat; }
      set { SetStat(value); }
    }
    public Builder SetStat(global::ClientCommonStat value) {
      PrepareBuilder();
      result.hasStat = true;
      result.stat_ = value;
      return this;
    }
    public Builder ClearStat() {
      PrepareBuilder();
      result.hasStat = false;
      result.stat_ = global::ClientCommonStat.OK;
      return this;
    }
  }
  static ClientCommonResponse() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UserLoginRequest : pb::GeneratedMessage<UserLoginRequest, UserLoginRequest.Builder> {
  private UserLoginRequest() { }
  private static readonly UserLoginRequest defaultInstance = new UserLoginRequest().MakeReadOnly();
  private static readonly string[] _userLoginRequestFieldNames = new string[] { "uname", "upwd" };
  private static readonly uint[] _userLoginRequestFieldTags = new uint[] { 10, 18 };
  public static UserLoginRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override UserLoginRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override UserLoginRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_UserLoginRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<UserLoginRequest, UserLoginRequest.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_UserLoginRequest__FieldAccessorTable; }
  }
  
  public const int UnameFieldNumber = 1;
  private bool hasUname;
  private string uname_ = "";
  public bool HasUname {
    get { return hasUname; }
  }
  public string Uname {
    get { return uname_; }
  }
  
  public const int UpwdFieldNumber = 2;
  private bool hasUpwd;
  private string upwd_ = "";
  public bool HasUpwd {
    get { return hasUpwd; }
  }
  public string Upwd {
    get { return upwd_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasUname) return false;
      if (!hasUpwd) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _userLoginRequestFieldNames;
    if (hasUname) {
      output.WriteString(1, field_names[0], Uname);
    }
    if (hasUpwd) {
      output.WriteString(2, field_names[1], Upwd);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasUname) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Uname);
    }
    if (hasUpwd) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Upwd);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static UserLoginRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserLoginRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserLoginRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserLoginRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserLoginRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserLoginRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static UserLoginRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static UserLoginRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static UserLoginRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserLoginRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private UserLoginRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(UserLoginRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<UserLoginRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(UserLoginRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private UserLoginRequest result;
    
    private UserLoginRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        UserLoginRequest original = result;
        result = new UserLoginRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override UserLoginRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::UserLoginRequest.Descriptor; }
    }
    
    public override UserLoginRequest DefaultInstanceForType {
      get { return global::UserLoginRequest.DefaultInstance; }
    }
    
    public override UserLoginRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is UserLoginRequest) {
        return MergeFrom((UserLoginRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(UserLoginRequest other) {
      if (other == global::UserLoginRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasUname) {
        Uname = other.Uname;
      }
      if (other.HasUpwd) {
        Upwd = other.Upwd;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_userLoginRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _userLoginRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasUname = input.ReadString(ref result.uname_);
            break;
          }
          case 18: {
            result.hasUpwd = input.ReadString(ref result.upwd_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasUname {
      get { return result.hasUname; }
    }
    public string Uname {
      get { return result.Uname; }
      set { SetUname(value); }
    }
    public Builder SetUname(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUname = true;
      result.uname_ = value;
      return this;
    }
    public Builder ClearUname() {
      PrepareBuilder();
      result.hasUname = false;
      result.uname_ = "";
      return this;
    }
    
    public bool HasUpwd {
      get { return result.hasUpwd; }
    }
    public string Upwd {
      get { return result.Upwd; }
      set { SetUpwd(value); }
    }
    public Builder SetUpwd(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUpwd = true;
      result.upwd_ = value;
      return this;
    }
    public Builder ClearUpwd() {
      PrepareBuilder();
      result.hasUpwd = false;
      result.upwd_ = "";
      return this;
    }
  }
  static UserLoginRequest() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UserLoginResponse : pb::GeneratedMessage<UserLoginResponse, UserLoginResponse.Builder> {
  private UserLoginResponse() { }
  private static readonly UserLoginResponse defaultInstance = new UserLoginResponse().MakeReadOnly();
  private static readonly string[] _userLoginResponseFieldNames = new string[] { "code", "ticket" };
  private static readonly uint[] _userLoginResponseFieldTags = new uint[] { 8, 18 };
  public static UserLoginResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override UserLoginResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override UserLoginResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_UserLoginResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<UserLoginResponse, UserLoginResponse.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_UserLoginResponse__FieldAccessorTable; }
  }
  
  public const int CodeFieldNumber = 1;
  private bool hasCode;
  private global::LoginCode code_ = global::LoginCode.SUC;
  public bool HasCode {
    get { return hasCode; }
  }
  public global::LoginCode Code {
    get { return code_; }
  }
  
  public const int TicketFieldNumber = 2;
  private bool hasTicket;
  private string ticket_ = "";
  public bool HasTicket {
    get { return hasTicket; }
  }
  public string Ticket {
    get { return ticket_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCode) return false;
      if (!hasTicket) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _userLoginResponseFieldNames;
    if (hasCode) {
      output.WriteEnum(1, field_names[0], (int) Code, Code);
    }
    if (hasTicket) {
      output.WriteString(2, field_names[1], Ticket);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCode) {
      size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
    }
    if (hasTicket) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Ticket);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static UserLoginResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserLoginResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserLoginResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserLoginResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserLoginResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserLoginResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static UserLoginResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static UserLoginResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static UserLoginResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserLoginResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private UserLoginResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(UserLoginResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<UserLoginResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(UserLoginResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private UserLoginResponse result;
    
    private UserLoginResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        UserLoginResponse original = result;
        result = new UserLoginResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override UserLoginResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::UserLoginResponse.Descriptor; }
    }
    
    public override UserLoginResponse DefaultInstanceForType {
      get { return global::UserLoginResponse.DefaultInstance; }
    }
    
    public override UserLoginResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is UserLoginResponse) {
        return MergeFrom((UserLoginResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(UserLoginResponse other) {
      if (other == global::UserLoginResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasTicket) {
        Ticket = other.Ticket;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_userLoginResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _userLoginResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            object unknown;
            if(input.ReadEnum(ref result.code_, out unknown)) {
              result.hasCode = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(1, (ulong)(int)unknown);
            }
            break;
          }
          case 18: {
            result.hasTicket = input.ReadString(ref result.ticket_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCode {
     get { return result.hasCode; }
    }
    public global::LoginCode Code {
      get { return result.Code; }
      set { SetCode(value); }
    }
    public Builder SetCode(global::LoginCode value) {
      PrepareBuilder();
      result.hasCode = true;
      result.code_ = value;
      return this;
    }
    public Builder ClearCode() {
      PrepareBuilder();
      result.hasCode = false;
      result.code_ = global::LoginCode.SUC;
      return this;
    }
    
    public bool HasTicket {
      get { return result.hasTicket; }
    }
    public string Ticket {
      get { return result.Ticket; }
      set { SetTicket(value); }
    }
    public Builder SetTicket(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTicket = true;
      result.ticket_ = value;
      return this;
    }
    public Builder ClearTicket() {
      PrepareBuilder();
      result.hasTicket = false;
      result.ticket_ = "";
      return this;
    }
  }
  static UserLoginResponse() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UserLogoutRequest : pb::GeneratedMessage<UserLogoutRequest, UserLogoutRequest.Builder> {
  private UserLogoutRequest() { }
  private static readonly UserLogoutRequest defaultInstance = new UserLogoutRequest().MakeReadOnly();
  private static readonly string[] _userLogoutRequestFieldNames = new string[] { "ticket" };
  private static readonly uint[] _userLogoutRequestFieldTags = new uint[] { 10 };
  public static UserLogoutRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override UserLogoutRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override UserLogoutRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_UserLogoutRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<UserLogoutRequest, UserLogoutRequest.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_UserLogoutRequest__FieldAccessorTable; }
  }
  
  public const int TicketFieldNumber = 1;
  private bool hasTicket;
  private string ticket_ = "";
  public bool HasTicket {
    get { return hasTicket; }
  }
  public string Ticket {
    get { return ticket_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasTicket) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _userLogoutRequestFieldNames;
    if (hasTicket) {
      output.WriteString(1, field_names[0], Ticket);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasTicket) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Ticket);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static UserLogoutRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserLogoutRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserLogoutRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserLogoutRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserLogoutRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserLogoutRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static UserLogoutRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static UserLogoutRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static UserLogoutRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserLogoutRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private UserLogoutRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(UserLogoutRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<UserLogoutRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(UserLogoutRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private UserLogoutRequest result;
    
    private UserLogoutRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        UserLogoutRequest original = result;
        result = new UserLogoutRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override UserLogoutRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::UserLogoutRequest.Descriptor; }
    }
    
    public override UserLogoutRequest DefaultInstanceForType {
      get { return global::UserLogoutRequest.DefaultInstance; }
    }
    
    public override UserLogoutRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is UserLogoutRequest) {
        return MergeFrom((UserLogoutRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(UserLogoutRequest other) {
      if (other == global::UserLogoutRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTicket) {
        Ticket = other.Ticket;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_userLogoutRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _userLogoutRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasTicket = input.ReadString(ref result.ticket_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTicket {
      get { return result.hasTicket; }
    }
    public string Ticket {
      get { return result.Ticket; }
      set { SetTicket(value); }
    }
    public Builder SetTicket(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTicket = true;
      result.ticket_ = value;
      return this;
    }
    public Builder ClearTicket() {
      PrepareBuilder();
      result.hasTicket = false;
      result.ticket_ = "";
      return this;
    }
  }
  static UserLogoutRequest() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UserLogoutResponse : pb::GeneratedMessage<UserLogoutResponse, UserLogoutResponse.Builder> {
  private UserLogoutResponse() { }
  private static readonly UserLogoutResponse defaultInstance = new UserLogoutResponse().MakeReadOnly();
  private static readonly string[] _userLogoutResponseFieldNames = new string[] { "code" };
  private static readonly uint[] _userLogoutResponseFieldTags = new uint[] { 8 };
  public static UserLogoutResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override UserLogoutResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override UserLogoutResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_UserLogoutResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<UserLogoutResponse, UserLogoutResponse.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_UserLogoutResponse__FieldAccessorTable; }
  }
  
  public const int CodeFieldNumber = 1;
  private bool hasCode;
  private global::LoginCode code_ = global::LoginCode.SUC;
  public bool HasCode {
    get { return hasCode; }
  }
  public global::LoginCode Code {
    get { return code_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCode) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _userLogoutResponseFieldNames;
    if (hasCode) {
      output.WriteEnum(1, field_names[0], (int) Code, Code);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCode) {
      size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static UserLogoutResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserLogoutResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserLogoutResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static UserLogoutResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static UserLogoutResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserLogoutResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static UserLogoutResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static UserLogoutResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static UserLogoutResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static UserLogoutResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private UserLogoutResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(UserLogoutResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<UserLogoutResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(UserLogoutResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private UserLogoutResponse result;
    
    private UserLogoutResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        UserLogoutResponse original = result;
        result = new UserLogoutResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override UserLogoutResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::UserLogoutResponse.Descriptor; }
    }
    
    public override UserLogoutResponse DefaultInstanceForType {
      get { return global::UserLogoutResponse.DefaultInstance; }
    }
    
    public override UserLogoutResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is UserLogoutResponse) {
        return MergeFrom((UserLogoutResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(UserLogoutResponse other) {
      if (other == global::UserLogoutResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCode) {
        Code = other.Code;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_userLogoutResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _userLogoutResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            object unknown;
            if(input.ReadEnum(ref result.code_, out unknown)) {
              result.hasCode = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(1, (ulong)(int)unknown);
            }
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCode {
     get { return result.hasCode; }
    }
    public global::LoginCode Code {
      get { return result.Code; }
      set { SetCode(value); }
    }
    public Builder SetCode(global::LoginCode value) {
      PrepareBuilder();
      result.hasCode = true;
      result.code_ = value;
      return this;
    }
    public Builder ClearCode() {
      PrepareBuilder();
      result.hasCode = false;
      result.code_ = global::LoginCode.SUC;
      return this;
    }
  }
  static UserLogoutResponse() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GetCharacterInfoRequest : pb::GeneratedMessage<GetCharacterInfoRequest, GetCharacterInfoRequest.Builder> {
  private GetCharacterInfoRequest() { }
  private static readonly GetCharacterInfoRequest defaultInstance = new GetCharacterInfoRequest().MakeReadOnly();
  private static readonly string[] _getCharacterInfoRequestFieldNames = new string[] { "ticket" };
  private static readonly uint[] _getCharacterInfoRequestFieldTags = new uint[] { 10 };
  public static GetCharacterInfoRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override GetCharacterInfoRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override GetCharacterInfoRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_GetCharacterInfoRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<GetCharacterInfoRequest, GetCharacterInfoRequest.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_GetCharacterInfoRequest__FieldAccessorTable; }
  }
  
  public const int TicketFieldNumber = 1;
  private bool hasTicket;
  private string ticket_ = "";
  public bool HasTicket {
    get { return hasTicket; }
  }
  public string Ticket {
    get { return ticket_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasTicket) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _getCharacterInfoRequestFieldNames;
    if (hasTicket) {
      output.WriteString(1, field_names[0], Ticket);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasTicket) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Ticket);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static GetCharacterInfoRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GetCharacterInfoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GetCharacterInfoRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GetCharacterInfoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GetCharacterInfoRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GetCharacterInfoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static GetCharacterInfoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static GetCharacterInfoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static GetCharacterInfoRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GetCharacterInfoRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private GetCharacterInfoRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(GetCharacterInfoRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<GetCharacterInfoRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(GetCharacterInfoRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private GetCharacterInfoRequest result;
    
    private GetCharacterInfoRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        GetCharacterInfoRequest original = result;
        result = new GetCharacterInfoRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override GetCharacterInfoRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::GetCharacterInfoRequest.Descriptor; }
    }
    
    public override GetCharacterInfoRequest DefaultInstanceForType {
      get { return global::GetCharacterInfoRequest.DefaultInstance; }
    }
    
    public override GetCharacterInfoRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is GetCharacterInfoRequest) {
        return MergeFrom((GetCharacterInfoRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(GetCharacterInfoRequest other) {
      if (other == global::GetCharacterInfoRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTicket) {
        Ticket = other.Ticket;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_getCharacterInfoRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _getCharacterInfoRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasTicket = input.ReadString(ref result.ticket_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTicket {
      get { return result.hasTicket; }
    }
    public string Ticket {
      get { return result.Ticket; }
      set { SetTicket(value); }
    }
    public Builder SetTicket(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTicket = true;
      result.ticket_ = value;
      return this;
    }
    public Builder ClearTicket() {
      PrepareBuilder();
      result.hasTicket = false;
      result.ticket_ = "";
      return this;
    }
  }
  static GetCharacterInfoRequest() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GetCharacterInfoResponse : pb::GeneratedMessage<GetCharacterInfoResponse, GetCharacterInfoResponse.Builder> {
  private GetCharacterInfoResponse() { }
  private static readonly GetCharacterInfoResponse defaultInstance = new GetCharacterInfoResponse().MakeReadOnly();
  private static readonly string[] _getCharacterInfoResponseFieldNames = new string[] { "character" };
  private static readonly uint[] _getCharacterInfoResponseFieldTags = new uint[] { 10 };
  public static GetCharacterInfoResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override GetCharacterInfoResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override GetCharacterInfoResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_GetCharacterInfoResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<GetCharacterInfoResponse, GetCharacterInfoResponse.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_GetCharacterInfoResponse__FieldAccessorTable; }
  }
  
  public const int CharacterFieldNumber = 1;
  private bool hasCharacter;
  private global::Character character_;
  public bool HasCharacter {
    get { return hasCharacter; }
  }
  public global::Character Character {
    get { return character_ ?? global::Character.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasCharacter) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _getCharacterInfoResponseFieldNames;
    if (hasCharacter) {
      output.WriteMessage(1, field_names[0], Character);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCharacter) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Character);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static GetCharacterInfoResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GetCharacterInfoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GetCharacterInfoResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GetCharacterInfoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GetCharacterInfoResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GetCharacterInfoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static GetCharacterInfoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static GetCharacterInfoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static GetCharacterInfoResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GetCharacterInfoResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private GetCharacterInfoResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(GetCharacterInfoResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<GetCharacterInfoResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(GetCharacterInfoResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private GetCharacterInfoResponse result;
    
    private GetCharacterInfoResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        GetCharacterInfoResponse original = result;
        result = new GetCharacterInfoResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override GetCharacterInfoResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::GetCharacterInfoResponse.Descriptor; }
    }
    
    public override GetCharacterInfoResponse DefaultInstanceForType {
      get { return global::GetCharacterInfoResponse.DefaultInstance; }
    }
    
    public override GetCharacterInfoResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is GetCharacterInfoResponse) {
        return MergeFrom((GetCharacterInfoResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(GetCharacterInfoResponse other) {
      if (other == global::GetCharacterInfoResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCharacter) {
        MergeCharacter(other.Character);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_getCharacterInfoResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _getCharacterInfoResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::Character.Builder subBuilder = global::Character.CreateBuilder();
            if (result.hasCharacter) {
              subBuilder.MergeFrom(Character);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Character = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCharacter {
     get { return result.hasCharacter; }
    }
    public global::Character Character {
      get { return result.Character; }
      set { SetCharacter(value); }
    }
    public Builder SetCharacter(global::Character value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCharacter = true;
      result.character_ = value;
      return this;
    }
    public Builder SetCharacter(global::Character.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCharacter = true;
      result.character_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCharacter(global::Character value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCharacter &&
          result.character_ != global::Character.DefaultInstance) {
          result.character_ = global::Character.CreateBuilder(result.character_).MergeFrom(value).BuildPartial();
      } else {
        result.character_ = value;
      }
      result.hasCharacter = true;
      return this;
    }
    public Builder ClearCharacter() {
      PrepareBuilder();
      result.hasCharacter = false;
      result.character_ = null;
      return this;
    }
  }
  static GetCharacterInfoResponse() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CharacterMove : pb::GeneratedMessage<CharacterMove, CharacterMove.Builder> {
  private CharacterMove() { }
  private static readonly CharacterMove defaultInstance = new CharacterMove().MakeReadOnly();
  private static readonly string[] _characterMoveFieldNames = new string[] { "ticket", "toPos" };
  private static readonly uint[] _characterMoveFieldTags = new uint[] { 10, 18 };
  public static CharacterMove DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CharacterMove DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CharacterMove ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::ClientGate.internal__static_CharacterMove__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CharacterMove, CharacterMove.Builder> InternalFieldAccessors {
    get { return global::ClientGate.internal__static_CharacterMove__FieldAccessorTable; }
  }
  
  public const int TicketFieldNumber = 1;
  private bool hasTicket;
  private string ticket_ = "";
  public bool HasTicket {
    get { return hasTicket; }
  }
  public string Ticket {
    get { return ticket_; }
  }
  
  public const int ToPosFieldNumber = 2;
  private bool hasToPos;
  private global::Position toPos_;
  public bool HasToPos {
    get { return hasToPos; }
  }
  public global::Position ToPos {
    get { return toPos_ ?? global::Position.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasTicket) return false;
      if (!hasToPos) return false;
      if (!ToPos.IsInitialized) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _characterMoveFieldNames;
    if (hasTicket) {
      output.WriteString(1, field_names[0], Ticket);
    }
    if (hasToPos) {
      output.WriteMessage(2, field_names[1], ToPos);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasTicket) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Ticket);
    }
    if (hasToPos) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, ToPos);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CharacterMove ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CharacterMove ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CharacterMove ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CharacterMove ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CharacterMove ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CharacterMove ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CharacterMove ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CharacterMove ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CharacterMove ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CharacterMove ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CharacterMove MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CharacterMove prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CharacterMove, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CharacterMove cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CharacterMove result;
    
    private CharacterMove PrepareBuilder() {
      if (resultIsReadOnly) {
        CharacterMove original = result;
        result = new CharacterMove();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CharacterMove MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CharacterMove.Descriptor; }
    }
    
    public override CharacterMove DefaultInstanceForType {
      get { return global::CharacterMove.DefaultInstance; }
    }
    
    public override CharacterMove BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CharacterMove) {
        return MergeFrom((CharacterMove) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CharacterMove other) {
      if (other == global::CharacterMove.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTicket) {
        Ticket = other.Ticket;
      }
      if (other.HasToPos) {
        MergeToPos(other.ToPos);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_characterMoveFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _characterMoveFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasTicket = input.ReadString(ref result.ticket_);
            break;
          }
          case 18: {
            global::Position.Builder subBuilder = global::Position.CreateBuilder();
            if (result.hasToPos) {
              subBuilder.MergeFrom(ToPos);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ToPos = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTicket {
      get { return result.hasTicket; }
    }
    public string Ticket {
      get { return result.Ticket; }
      set { SetTicket(value); }
    }
    public Builder SetTicket(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTicket = true;
      result.ticket_ = value;
      return this;
    }
    public Builder ClearTicket() {
      PrepareBuilder();
      result.hasTicket = false;
      result.ticket_ = "";
      return this;
    }
    
    public bool HasToPos {
     get { return result.hasToPos; }
    }
    public global::Position ToPos {
      get { return result.ToPos; }
      set { SetToPos(value); }
    }
    public Builder SetToPos(global::Position value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasToPos = true;
      result.toPos_ = value;
      return this;
    }
    public Builder SetToPos(global::Position.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasToPos = true;
      result.toPos_ = builderForValue.Build();
      return this;
    }
    public Builder MergeToPos(global::Position value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasToPos &&
          result.toPos_ != global::Position.DefaultInstance) {
          result.toPos_ = global::Position.CreateBuilder(result.toPos_).MergeFrom(value).BuildPartial();
      } else {
        result.toPos_ = value;
      }
      result.hasToPos = true;
      return this;
    }
    public Builder ClearToPos() {
      PrepareBuilder();
      result.hasToPos = false;
      result.toPos_ = null;
      return this;
    }
  }
  static CharacterMove() {
    object.ReferenceEquals(global::ClientGate.Descriptor, null);
  }
}

#endregion

#region Services
/*
* Service generation is now disabled by default, use the following option to enable:
* option (google.protobuf.csharp_file_options).service_generator_type = GENERIC;
*/
/*
* Service generation is now disabled by default, use the following option to enable:
* option (google.protobuf.csharp_file_options).service_generator_type = GENERIC;
*/
#endregion


#endregion Designer generated code
